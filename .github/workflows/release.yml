name: Rust CI/CD

on:
  push:
    branches: ["main"]
    tags:
      - "v*" # Trigger release job on tags like v1.0.0
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always # Keep Cargo output colored

jobs:
  # -----------------------------------------------------------------
  # JOB 1: CD - Build MSI and Release (Windows)
  # Runs ONLY when a tag (e.g., v1.0.0) is pushed
  # -----------------------------------------------------------------
  build_msi_and_release:
    name: Build MSI & Release (Windows)
    runs-on: windows-latest # Dedicated Windows runner for MSI creation

    # This job only runs if the trigger was a tag push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc # Essential for Windows .exe and MSI

      - name: Cache Cargo dependencies (Windows)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache built binary
        id: cache-binary
        uses: actions/cache@v4
        with:
          path: |
            RustHandScraper/target/release/RustHandScraper.exe
          key: ${{ runner.os }}-binary-${{ hashFiles('RustHandScraper/src/**/*.rs') }}-${{ hashFiles('RustHandScraper/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-binary-

      - name: Cache cargo-wix
        id: cache-cargo-wix
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cargo-wix.exe
          key: ${{ runner.os }}-cargo-wix-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-wix-

      - name: Install cargo-wix (if not cached)
        if: steps.cache-cargo-wix.outputs.cache-hit != 'true'
        run: cargo install cargo-wix --force

      - name: Cache WiX Toolset
        id: cache-wix
        uses: actions/cache@v4
        with:
          path: |
            C:\Program Files (x86)\WiX Toolset v3.14\
          key: ${{ runner.os }}-wix-3.14
          restore-keys: |
            ${{ runner.os }}-wix-

      - name: Install WiX Toolset (if not cached)
        if: steps.cache-wix.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314.exe" -OutFile "wix314.exe"
          Start-Process -FilePath "wix314.exe" -ArgumentList "/install","/quiet" -Wait

      - name: Build Release Binary (if not cached)
        if: steps.cache-binary.outputs.cache-hit != 'true'
        run: |
          cd RustHandScraper
          cargo build --release

      - name: Create MSI Installer
        run: |
          cd RustHandScraper
          cargo wix --nocapture

      - name: Get Release Information
        id: release_info
        run: |
          $TAG_NAME = "${{ github.ref }}" -replace "refs/tags/", ""
          echo "tag_name=$TAG_NAME" >> "$env:GITHUB_OUTPUT"
          $APP_NAME = "RustHandScraper"
          echo "app_name=$APP_NAME" >> "$env:GITHUB_OUTPUT"

      - name: List generated files
        id: list_files
        run: |
          echo "Checking for generated MSI files:"
          $msiFiles = Get-ChildItem -Path "RustHandScraper/target" -Recurse -Filter "*.msi"
          $msiFiles | ForEach-Object { Write-Host $_.FullName }
          $filesString = ($msiFiles | ForEach-Object { $_.FullName }) -join "`n"
          echo "filesString=$filesString" >> "$env:GITHUB_OUTPUT"

      - name: Upload MSI to Release
        uses: softprops/action-gh-release@v2
        # This 'if' ensures it only runs if the job itself was triggered by a tag (redundant but harmless)
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: Release ${{ steps.release_info.outputs.app_name }} ${{ steps.release_info.outputs.tag_name }}
          generate_release_notes: true # Generates release notes from Git history
          files: ${{ steps.list_files.outputs.filesString }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
